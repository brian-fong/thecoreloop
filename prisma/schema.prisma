// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



// TIP: helpful commands after changes in schema.prisma 
  // $ npx prisma update
  // $ npx prisma generate
  // $ npx prisma migrate dev
  // $ npx prisma migrate 
  // if you are in dev and do not care about permanent db changes you can use
    // $ npx prisma db push
    // This will update the schema of the tables in the db you are connected to
    // but may delete every row


//shadowDatabaseUrl will be your local machine's db_url as some db services like planet scale will not grant you permissions to make one
//relationMode: planetscale will not manage relations for you so you need to write this out for prisma to manage it for you in planetscale

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}




//possible future columns discord telegram twitter


model User {
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @default(now())
  handle            String    @id @unique @db.VarChar(255)
  username          String?   @db.VarChar(255)
  admins            Project[] @relation("ProjectOwner")
  hunter            Project[] 
  comments_created  Comment[] 
  comments_liked    Comment[] @relation("LikedComments")
  liked_projects    Project[] @relation("Community")
  profilePicture    String    @default("https://i.imgur.com/nM6hUst.png")
}


// when project is submitted, we check to see if in the team or not, if they say that they are -> investigation, if correct, we want to show that they are infact part of the team else -> they would get credit for posting the project
//s3_bucket folders
//example s3 filename: studio-name-thumbnail, studio-name-gallery-1,2,3
// gallery = ["s3links","s3link", "s3link"] -> db = ["","",""]
//add team?

 // profile project: 
 // admins: profiles

 // community members: upvoted
  //upvote count can be changed into User[] and upvote count can be user.length
  //but this will have delays on the front end so it will take ~2 seconds to show the upvote click
    //in order to optimize this, useState and ++ it.

model Project {
  id              Int       @unique @id @default(autoincrement())
  upvote_count    Int       @default(0)
  name            String
  studio          String
  thumbnail       String?
  blockchain      String?
  description     String?   @db.Text
  tagline         String?   @db.Text
  fundraising     Boolean
  links           String?
  genres          Genre[]   @relation("ProjectGenre")
  gallery         String?  
  stage           Stage?    
  owner           User[]    @relation("ProjectOwner")
  hunter          User?     @relation(fields:[hunterId], references:[handle])
  hunterId        String?    
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt @default(now())
  community       User[]   @relation("Community")
  platform        String?
  @@unique([name, studio], name:"name_studio")
  approval        Boolean @default(false)
  youtubeUrl      String?
  founderStory    String @default("No Founder Story yet")
}


model Comment {
  id Int        @unique   @id @default(autoincrement())
  authorId      String?      
  author        User?     @relation(fields:[authorId], references:[handle])
  content       String?
  parentId      Int?
  parentComment Comment?  @relation("ParentChildComment",fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments      Comment[] @relation("ParentChildComment")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
  likes         User[]    @relation("LikedComments")
}

model Genre {
  genre       String  @id @unique
  description String? @db.VarChar(255)
  games       Project[]  @relation("ProjectGenre") 
}

enum Stage {
  preProduction
  production
  playableDemo
  live
}

enum Platform{
  PlayStation
  PC
  MacOS
  Andriod
  Iphone

}



